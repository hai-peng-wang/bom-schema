syntax = "proto3";

package bom;

option java_outer_classname="ComponentProto";

import "common/tag.proto";
import "common/address.proto";
import "common/version.proto";
import "common/contact.proto";
import "common/userid.proto";
import "common/log_info.proto";
import "common/enums/component_level.proto";
import "common/enums/component_relation.proto";
import "common/enums/prod_status.proto";
import "common/enums/realm.proto";

/// Summary of application or device component.
message Component {
  /// Describes the relationship between this component and other components.
  // Consider Components representing labelled vertices/nodes of a graph; then
  // the Component Relations represent labelled edges that connect these
  // vertices.
  message Relation {
    int64 id = 1; /// ID of other component. ie the "other identified component"
    // The relationship between this component and the other identified
    // component
    bom.component_relation.ComponentRelation relationship = 2;
    /// Description of the relationship/connection. eg the protocol used for
    // a data transfer, the name of the network over which the connection
    // occurs or information about the timing/rate of information flow etc
    string relation_description = 3;
    /// Description of any data involved/shared/passed via the
    // relationship/connection (if applicable)
    string data_description = 4;
  }
  /// Component.Info: Information about the component that will mostly or
  // entirely be known at deploy time
  message Info {
    bom.component_level.ComponentLevel level = 1;
    string name = 2; /// Name of component
    /// The type of the component, e.g. HTTP server, iOS app, Cylc suite etc
    string type = 3;
    Version version = 4; /// Version of component
    string description = 5; /// More detailed description of component
    URI uri = 6; /// URI for more information about the component
    /// The level of support for the component
    ProductionStatus production_status = 7;
    /// Family of systems that this component is part of, e.g. ACCESS
    // Note: maps to stream for MDS model data
    string family = 8;
    /// Family-level version information, if relevant.
    // Note: maps to stream version for MDS
    Version family_version = 9;
    /// Internal project name best aligned with the relevant component
    // (if relevant)
    string project_name = 10;
    repeated Contact contacts = 11;
    /// This component may have a global/universally unique identifier
    Id universal_id = 12;
    string namespace = 13; /// Component namespace, if applicable
  }

  /// Component identifying information
  Info info = 1;

  /// ID of component as used in component relationship description
  // The set of relation_ids used across components in a Producer message need
  // only identify unique components for that particular Producer message. There
  // is no need for such ids to be globally meaningful or consistent across
  // messages from different producers.
  int64 relation_id = 2;
  /// Relationship of this component to other component(s) at a
  // workflow/dataflow level, permitting a relational directed graph to be
  // constructed.
  // NB: for any given pair of components there need only be one relationship.
  // Multiple relationships for the same pair shall be treated in an additive
  // way where possible. The addition of two or more contradictory
  // relationships may be undefined/ambiguous.
  repeated Relation relationships = 3;

  /// Username or service account under which the relevant_component is running
  Userid user = 4;

  /// In certain contexts different instances of the same component may be
  // assigned a specific id, e.g. a UUID
  Id instance_id = 5;

  /// Information about the host device that the relevant_component is
  // running on
  Device host = 6;

  /// Relevant logs generated by this component
  repeated LogInfo logs = 7;

  /// Addtional user-defined information about this component
  repeated Tag tags = 8;
}

/// The operational/production status of a system. This mainly relates to
// the degree of support for the system along with the environment in which
// it is running
message ProductionStatus {
  bom.prod_status.ProdStatus status = 1;
  /// Additional information about the production status, e.g. caveats that
  // might apply.
  string info = 2;
}

/// Summary-level information about a device, machine or server
message Device {
  /// The "realm" classification of the device (e.g. DEV, STAGE, PROD)
  bom.realm.Realm realm  = 1;
  string type = 2;
  /// String representation of the physical device
  string physical_desc = 3;
  /// Hostname (or a similar registered address) of the device
  // If service is distributed, the address of the interface or master
  // server
  Address address = 4;
  /// ID of the device, if applicable
  Id device_id = 5;
  /// ID of the node or machine image (as built for a container or
  // assigned by a container or cluster manager) or similar
  Id image_id = 6;
  /// Path of the device within a container, if applicable
  string container_path = 7;
  /// Architecture of device, e.g. x86_64
  string architecture = 8;
  /// Operating system of the machine running the component, or name of
  // firmware if applicable
  string os = 9;
  /// OS version/kernel information (or firmware version if applicable)
  Version os_version = 10;
  /// More detailed information for applications running in a cluster
  // or cloud context
  ClusterInfo cluster_info = 11;
  /// Additional annotations or tags to describe the device
  repeated Tag tags = 12;
}

message ClusterInfo {
  string name = 1; /// The cluster/cloud name
  Id id = 2; /// ID of the cluster, if applicable
  /// The engine or controller managing the cluster/cloud environment
  string engine_name = 3;
  Version engine_version = 4; /// The version of the managing engine/controller
  /// Each region is a separate geographic area, in the context of a
  // distributed cloud platform
  string region = 5;
  /// Availibility zones are isolated locations within a region
  string availability_zone = 6;
  /// The host type aligns with specified hardware of the host computer for
  // this instance
  string host_type = 7;
  /// Placement group that launched the instance
  string placement_group_name = 8;
  /// The namespace this instance belongs to, if applicable
  string namespace = 9;
  /// Reference to a named environment/configuration
  string env_name = 10;
  /// A list that contains the security group IDs for virtual private cloud
  // security groups
  repeated Id vps_security_group_ids = 11;
  /// A list that contains security group names registered for this instance
  repeated string security_groups = 12;
  /// Cluster subnet id. This may for example correspond to a virtual private
  // cloud subnet group id
  Id subnet_id = 13;
  string additional_info = 14;
  repeated Tag tags = 15;
}
