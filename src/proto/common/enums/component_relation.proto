syntax = "proto3";

package bom.component_relation;

option java_package = "bom";
option java_outer_classname="ComponentRelationProto";

/// ComponentRelation describes the type of high-level data-flow, process or
// hierarchical relationship (whichever is most relevant) that this component
// has to the other identified component. The relationship is usually
// directional, e.g.:
// 1. an outbound data-push or downstream (sequentially) processing
//    connection or relationship from this component to the other component.
// 2. an inbound (data pull or upstream) relationship or connection from the
//  other component to this component.
// Note: inbound/output semantics vary between different flow chart/
//       process or architectural diagram methodologies. The following
//       definitions are intended to best represent simplified high-level
//       data-flow/work-flow practices. In reality most actual relationships
//       involve varying degrees of two-way interactions (e.g. a data
//       push over TCP involves inbound traffic associated with the
//       handshake and acknowledgements)
//
// SUPERCOMPONENT through to EVENT_SRC describe "outbound" directed arcs/edges.
// i.e. an outbound connection or relation from this component to the
// other identified component
//
// SUBCOMPONENT through to EVENT_SINK describe "inbound" directed arcs/edges.
enum ComponentRelation {
  UNSET = 0;
  UNKNOWN = 1;

  /// This component is a supercomponent of the other component. ie the
  // other component is a subcomponent. Generally a supercomponent manages/
  // delegates work or pushes instructions/data to the subcomponent, hence
  // this is principally an outbound relationship from the perspective of
  // sequential process workflow
  SUPERCOMPONENT = 2;
  /// This component involves an upstream requirement that must be met before
  // the other component can carry out its function. e.g. this
  // component may be a task that must complete before the other task
  // can begin
  UPSTREAM_REQUIREMENT = 3;
  /// The two components are part of distinct ecosystems, yet this
  // component is managing/directing (or delegating) activity in the
  // other component.
  INSTRUCTOR = 4;
  /// System characteristics of this components operation are being monitored
  // by the other component (in a "pull"/"query"/"poll"/"listen"-like
  // fashion). This component may indeed not be directly "aware" of this
  // monitoring. In some cases this component may be providing an API or
  // event-based mechanism which supports such monitoring.
  // "System"-level monitoring entails watching system processes,
  // metrics or diagnostic/logged data generated by this component to
  // help ascertain the health or state of this component
  SYS_MONITORED = 5;
  /// As per SYS_MONITORED but the other system is also performing a more
  // significant analysis of this components systems. Such analysis may
  // or may not be happening in real-time
  SYS_ANALYSED = 6;
  /// This components output data is being watched/monitored by the other
  // component (in a "pull"/"query"/"poll"/"listen"-like fashion).
  // "Data"-level monitoring entails tracking output generated
  // by this component (e.g. gridded model output, product generation,
  // observations collected from sensors etc). Typically such tracking may
  // take place to monitor the progress of this components run-time
  // or operation, to create dataset events on behalf of this
  // application or to direct yet another component to perform some
  // operation with the data (e.g. copying, validating, ingesting,
  // notifying etc)
  DATA_MONITORED = 7;
  /// This components output data is read by the other component
  // for a technical validation step. This component therefore
  // represents a data source that is used by the other component
  DATA_SRC_FOR_VALIDATION = 8;
  /// As per DATA_SRC_FOR_VALIDATION but where the other component forms
  // part of a scientific verification step/process
  DATA_SRC_FOR_VERIFICATION = 9;
  /// This components output data is ingested by the other component
  // for further processing
  DATA_SRC_FOR_INGEST = 10;
  /// This components output data is archived by the other component
  // (to a local or remote data store)
  DATA_SRC_FOR_ARCHIVAL = 11;
  /// This components output data is copied/transferred by the other
  // component to a local or remote destination (ie the other component
  // relays this data onward or provides connectivity services for this
  // data)
  DATA_SRC_FOR_TRANSFER = 12;
  /// this component is a data relayer/connector that receives data from
  // another system and relays it to the identified component
  DATA_RELAY_OUTBOUND = 13;
  /// This components state is cloned/mirrored/replicated to the other
  // component
  SRC_FOR_CLONING = 14;
  /// This component issues event(s) for consumption by the other component
  EVENT_SRC = 15;

  /// This component is a subcomponent of the other component
  SUBCOMPONENT = 64;
  /// This components depends on the other component to perform some
  // action(s) or reach/set some state(s) before this component can progress
  // its function
  DEPENDENT_ON = 65;
  /// This component is being instructed to perform work by a component
  // belonging to a different system tier/suite/device ecosystem
  INSTRUCTED = 66;
  /// This component pulls system-level data/metrics from the other component
  // i.e. this component is a consumer of system-related change of state
  // information generated by the other component
  SYS_MONITOR = 67;
  /// As per SYS_MONITOR but this system is also performing a more intensive
  // analysis of the data collected
  SYS_ANALYSER = 68;
  DATA_MONITOR = 69;
  DATA_RECEIVER_FOR_VALIDATION = 70;
  DATA_RECEIVER_FOR_VERIFICATION = 71;
  DATA_RECEIVER_FOR_INGEST = 72;
  DATA_RECEIVER_FOR_ARCHIVAL = 73;
  /// This component receives data from the other identified component with
  // the intention of transferring this data to another location/component
  // Note: DATA_RECEIVER_FOR_TRANSFER is equivalent to a
  // "DATA_RELAY_INBOUND" (a relayer that receives data from the other
  // identified component)
  DATA_RECEIVER_FOR_TRANSFER = 74;
  /// This component is cloned from the other identified component
  RECIPIENT_OF_CLONING = 75;
  /// This component receives events produced by the other identified
  // component
  EVENT_SINK = 76;
}
