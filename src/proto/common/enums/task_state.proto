syntax = "proto3";

package bom.task_state;

option java_package = "bom";
option java_outer_classname = "TaskStateProto";

///Task state. Many states represented by TaskState won't
// be applicable to most systems or may represent intermediate states
// that are not tracked. Please choose an appropriate subset on
// a workflow/batch system by system basis. More specific states are
// preferred over their generic counterparts.
// Note: a late task is represented by setting a late time duration in
// the TaskStatus message; e.g. a task may have a TaskState of WAITING or
// RETRYING and also be late
enum TaskState {
  UNSET = 0;
  UNKNOWN = 1; /// Unknown/indeterminate state

  CREATED = 2; /// Newly created task
  /// Task configuration/content is being validated before
  // or as part of a workflow, dispatch, submit or pre-run process
  PREVALIDATING = 3;
  PREVALIDATING_FAIL = 4; /// Pre-validation step failed
  INVALID = 5; /// Task found to be invalid prior to execution
  /// Task proxy exists in a scheduler but is not currently in a
  // configuration that permits it to be progressed to a waiting, queued or
  // run state
  DORMANT = 6;

  // Waiting states precede submission/execution and are expected to be
  // temporary in nature. Under normal circumstances the task is expected
  // to progress from a waiting state without unusual/undue intervention.
  // Note: in some systems, "waiting" states as described here are referred to
  // as being deferred or held/on-hold.

  /// Generic waiting state (waiting on one more conditions to be met).
  //  Better qualified waiting states follow below
  WAITING = 9;
  /// Waiting purely on a time condition
  WAITING_TIME = 10;
  /// Waiting on trigger(s)/event(s)/pre-condition(s) to be set/satisfied prior
  // to execution. This includes a mix of a temporal trigger and other
  // dependencies.
  WAITING_PRECONDITIONS = 11;
  /// Task is eligible to run (normal pre-conditions have been met) but
  // is will not yet be submitted/executed due to a "runahead" restriction
  // which is a limit imposed on many cycles ahead/ tasks from a cycling suite
  // are permitted to run.
  WAITING_RUNAHEAD = 12;
  /// Job waiting in a queue or is part of some group or allocation that has
  // reached a constraint/limit (e.g. there may be a maximum number of jobs a
  // specific user can run per day).
  WAITING_QUEUE = 13;
  /// The resources requested by the job do not currently exist in an available
  // state (e.g. they are busy, reserved or temporarily offline).
  WAITING_RESOURCES = 14;
  /// The task is ready to run pending an authorisation step
  //  (e.g. awaiting approval of an operator via a GUI)
  WAITING_AUTHORISATION = 15;

  // Held states are like waiting states but are likely to require some level
  // of intervention (often manual) to remove/release the hold and progress
  // the task.

  /// Generic held/on-hold state. Better qualified held states follow below.
  // Note: if HELD state is due to an administrator's actions,
  // set state = HELD and TaskStatus.state_actor.system_actor_type = ADMIN.
  // Similar possibilities exist for USER and OPERATOR holds.
  HELD = 18;
  /// System-level or resource-manager job hold.
  HELD_BY_SYSTEM = 19;
  /// The resources requested by the job do not currently exist in an available
  // state and this is treated as a hold rather than a waiting
  // (WAITING_RESOURCES) state. This is more specific than HELD_BY_SYSTEM.
  HELD_BY_RESOURCES = 20;

  /// Job deleted from queue by user before execution, or task/task-definition
  // dropped/omitted from scheduler prior to job submission.
  // Note: if DROPPED state is due to action carried out by the job/task
  // user/owner, then this can be indicated by setting state = DROPPED and
  // TaskStatus.state_actor.system_actor_type = USER.
  DROPPED = 23;

  /// In a task pre-processing step, probably run as part of the
  // workflow scheduler
  PREPROCESSING = 24;
  PREPROCESSING_FAIL = 25;
  /// Successful completion of a task preprocessing stage
  PREPROCESSING_SUCCESS = 26;

  QUEUED = 29; /// Queued/getting ready to run
  READY = 30; /// Ready to run/submit, not waiting and not held
  EXPIRED = 31; /// A deadline has been passed and this task won't be completed

  /// The task/job has is in the process of being submitted/dispatched
  SUBMITTING = 35;
  SUBMIT_SUCCESS = 36; /// The task has been successfully submitted/dispatched
  /// The task submit process failed or was killed before the start of task
  // execution
  SUBMIT_FAIL = 37;
  /// The task submit process appeared to hang/timed-out.
  SUBMIT_TIMEOUT = 38;
  /// As per SUBMIT_FAIL or SUBMIT_TIMEOUT but a resubmit (possibly after a
  // configured delay) will be attempted automatically
  SUBMIT_RETRYING = 39;

  /// Task rejected by batch scheduler or a security layer prior to execution
  REJECTED = 41;

  PREJOB = 42; /// Running a pre-job/setup step, prior to execution of core task
  PREJOB_FAIL = 43;
  PREJOB_SUCCESS = 44; /// Successful completion of the pre-job step(s)

  AUTHENTICATING = 45;
  AUTHENTICATE_SUCCESS = 46;
  AUTHENTICATE_FAIL = 47;
  AUTHENTICATE_TIMEOUT = 48;

  /// Task started running/reported commencement of execution,
  // sometimes referred to as the "BEGUN" state
  STARTED = 50;
  PROGRESS = 51; /// Task in progress (used for possible progress updates)
  /// Environment setup, if distinct from PREJOB and INITIALISING phases.
  ENV_SETUP = 52;
  /// Environment setup completed successfully.
  ENV_SETUP_SUCCESS = 53;
  ENV_SETUP_FAIL = 54;
  /// Following execution, task has reached an initialisation phase.
  INITIALISING = 55;
  /// INITIALISING phase has been successfully completed
  INITIALISE_SUCCESS = 56;
  INITIALISE_FAIL = 57;

  SUCCESS = 58; /// Task appears to have concluded normally & successfully
  STOPPED = 59; /// Task stopped mid execution as part of workflow design
  /// Task execution in process of pausing
  PAUSING = 60;
  /// Task execution paused; task still memory/process resident (not vacated)
  PAUSED = 61;
  PAUSE_FAIL = 62; /// Pausing the task failed

  /// Task, during the course of execution, is requesting/prompting
  // for additional interactive input or authorisation
  PROMPTING = 63;

  /// Task in the process of suspending. Usually used as a mechanism
  // to free up resources for other higher priority jobs in a batch scheduler
  // context which usually involves some sort of snap-shotting of task state
  // and temporarily stopping task execution.
  // Sometimes referred to as task vacating, a task vacation or job preemption.
  SUSPENDING = 64;
  /// Task suspended/vacated and needs to be resumed to progress/complete.
  SUSPENDED = 65;
  SUSPEND_FAIL = 66; /// Suspending/vacating the task failed
  SUSPEND_TIMEOUT = 67; /// Suspending failed due to hanging or taking too long
  CHECKPOINTING = 68; /// Job/task is in the process of creating checkpoint
                      // information from which operations the task performs
                      // could be resumed from
  CHECKPOINT_SUCCESS = 69;
  CHECKPOINT_FAIL = 70; /// Failure during check-pointing

  RESTORING = 72; /// Restoring/resuming from a check-point or other saved state
  RESTORE_FAIL = 73;
  RESTORE_SUCCESS = 74;

  POSTJOB = 76; /// Running a post-job/clean step. Note: if prior task
  // functions were carried out successfully and the post-job phase is also
  // successful (and there is not remaining task phase), the task state should
  //  progress to "SUCCESS".
  POSTJOB_FAIL = 77;
  /// Running a validation step as part of the task following execution
  POSTVALIDATING = 79;
  POSTVALIDATING_FAIL = 80;

  /// Task is in the process of handling an error
  ERROR_HANDLING = 82;
  /// Task successfully handled an error
  ERROR_HANDLING_SUCCESS = 83;
  /// Failure during task error handling step
  ERROR_HANDLING_FAIL = 84;

  /// Job is exiting after having run (normally in a batch scheduler context).
  EXITING = 85;

  RETRYING = 86; /// Retrying after having previously progressed to some

  FAILED = 87; /// Task failed (desired outcome of the task was not reached)
  /// Multiple task retries have all failed. This is a failed state.
  RETRY_LIMIT_REACHED = 88;

  /// Diagnostics suggest task appears to have succeeded
  // but some warnings/errors/abnormalities were encountered
  ABNORMAL_SUCCESS = 89;
  /// Task is reporting a warning during execution but has not
  // finished. This is a potential intermediate state of a task:
  // If it succeeds ABNORMAL_SUCCESS should be reported.
  // If it fails one of the many failure modes should be reported.
  WARNING = 90;
  /// An error was found during execution but task is continuing.
  ERROR_WITH_CONTINUATION = 91;
  /// An attempt at killing the task has taken place
  KILLING = 93;
  /// An attempt at killing the task has apparently failed
  KILLING_FAIL = 94;
  /// An attempt at killing the task has apparently hung/timed-out and may
  // not have taken effect
  KILLING_TIMEOUT = 95;
  KILLED_BY_COMMAND = 96; /// For example via kill or qdel
  KILLED_BY_TIME_LIMIT = 97;
  KILLED_BY_CPU_LIMIT = 98;
  KILLED_BY_MEMORY_LIMIT = 99;
  KILLED_BY_PROCESS_LIMIT = 100;
  KILLED_BY_FILE_SIZE_LIMIT = 101;
  KILLED_BY_FILE_NUMBER_LIMIT = 102;
  KILLED_BY_SECURITY_POLICY = 103;
  KILLED = 106; /// Killed by another or unspecified mechanism
  /// Program/model run cancelled during execution via some mechanism other
  // than kill or a retry limit
  CANCELLED = 107;

  // A collection of possibly more exotic states follows
  SKIPPED = 110; /// Task to be skipped

  /// Job control responsibility is being migrated to another system
  MIGRATING = 111;
  MIGRATED = 112;
  MIGRATING_FAIL = 113;

  /// The job/task itself is in the process of being routed or moved to a new
  // destination
  TRANSIT = 114;
  TRANSIT_SUCCESS = 115;
  TRANSIT_FAIL = 116;

  /// Task is executing but progress is blocked
  BLOCKED = 117;
  /// Execution has hung and become unresponsive.
  HUNG = 118;
  /// Attempts to determine task state have failed (e.g. network outage).
  // It is unknown if the task is still running or not
  UNREACHABLE = 119;
  /// Attempts to track a task have failed and it is now considered
  // lost by this system.
  LOST = 120;
  /// Process has become a zombie (process is still running but is become
  // detached in some way from the managing process)
  ZOMBIE = 121;

  /// Resurrecting is the process of restoring a ZOMBIE or possibly a
  // previously UNREACHABLE task (or, from a workflow scheduler perspective,
  // even a task that was hard killed by a resource manager then later
  // restarted) to a "normal" task
  RESURRECTING = 122;
  RESURRECTED = 123;
  RESURRECT_FAIL = 124;

  /// Task forced to be in a completed state from the perspective of a
  // scheduler/job manager. It may in-fact never have run or
  // may still be running if it had previously launched.
  FORCE_COMPLETED = 125;

  /// Model progress was stopped by a model mechanism, for example numerical
  // convergence thresholds were not met.
  MODEL_STOP = 127;

  /// If the task/job needs to acquire a license to execute (at the task or
  // sub-task level) then it may be useful to track the license acquisition
  // phase:
  LICENSE_ACQUISITION = 333;
  LICENSE_ACQUISITION_SUCCESS = 334;
  LICENSE_ACQUISITION_FAIL = 335;
  LICENSE_ACQUISITION_TIMEOUT = 336;
}
