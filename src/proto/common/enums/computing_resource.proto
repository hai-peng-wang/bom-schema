syntax = "proto3";

package bom.computing_resource;

option java_package = "bom";
option java_outer_classname="ComputingResourceProto";

/// Computing related resources, as relating to
// capabilities or limits of a computing environment or
// limits imposed on jobs or processes by policy or
// management systems.
enum ComputingResource {
    UNSET = 0;
    UNKNOWN = 1;

    /// Physical CPU details
    // number: number of physical CPUs (with respect to specified scope)
    // amount: speed in MHz
    // qualifiers: specific model/type/variant(s)
    CPU = 2;
    /// Virtualised CPU details. Units as per CPU.
    VCPU = 3;
    /// Physical CPU cores. Units as per CPU.
    CORES = 8;
    /// NUMA details
    // number: number of NUMAs (with respect to specified scope)
    // amount: number of parallel environment per NUMA
    // qualifiers: specific variant(s) of NUMA (if applicable)
    NUMA = 10;
    /// Accelerator details. Units as per CPU
    ACCELERATOR = 14;

    /// MPI process details
    // number: number of MPI processes requests
    // amount: N/A
    // qualifiers: specific type/mode(s) or other details of
    //             MPI process (if applicable)
    MPIPROC = 18;
    /// OMP thread details
    // number: number of OMP threads (usually per "chunk" or process)
    // amount: N/A
    // qualifiers: notes/commentary on OMP threads or similar
    OMPTHREADS = 19;
    /// Network details
    // number: number of network interfaces comprising this resource
    // amount: speed of each interface in Mbit/s
    // qualifiers: specific model/type/variant(s) of network interface
    NETWORK = 20;

    /// Specified resource is a type of node
    // number: number of this type of node comprising this resource
    // amount: N/A
    // qualifiers: specific model/type/variant(s)
    NODE_COMPUTE = 30;
    NODE_LOGIN = 31;
    NODE_DATAMOVER = 32;
    /// MAMU = "multi-application multi-user"
    NODE_MAMU = 33;
    /// MOM = "machine oriented miniserver"
    NODE_MOM = 34;
    /// Specific host(s)
    // number: leave unset; number inferred from length of qualifiers list.
    // amount: set to 1 if work carried out by the job (at the level set by
    //         the "scope"), is allowed/intended to be run in parallel across
    //         nominated hosts.
    // qualifiers: hostname of host(s), or other unique string identifiers
    //             representing individual host(s).
    HOST = 35;
    /// Resources contained within particular data-centre site(s). If more than
    // number: N/A
    // amount: if more than one site is specified, then set this amount to 1
    //         if the job is allowed/intended to be run in parallel across
    //         nominated sites (or leave unset if site affinity desired).
    //         If site affinity is required, it is intended that
    //         the order that multiple sites are listed (in "qualifiers")
    //         represents a preferential order for job placement, or for
    //         possible job migration during the course of execution.
    // qualifiers: name of site(s) nominated to provide resources
    SITE = 36;
    /// Specified resource is a specified architecture or list of permissible
    // architectures.
    // number: N/A
    // amount: N/A
    // qualifiers: specific architecture(s) (and version if applicable).
    ARCH = 40;
    /// AOE - Application Operating Environment. Units as per ARCH, except
    // this usually refers to an environment at the OS-level.
    AOE = 41;
    /// Software requirement. Unit as per ARCH, except this refers to
    // a particular (usually unusual) software application/framework
    SOFTWARE = 42;

    /// Execution walltime available. If MIN_WALLTIME also requested by job
    // this job is considered to be a "shrink-to-fit" job and walltime
    // is interpreted as a "MAX_WALLTIME".
    // amount units: milliseconds
    WALLTIME = 50;
    /// Minimum execution walltime requested for a "shrink-to-fit" job.
    // amount units: milliseconds
    MIN_WALLTIME = 51;
    /// Execution cputime available. Set TaskResource.scope to distinguish
    // between a job-wide resource or a per-process resource
    // amount: time in milliseconds
    CPUTIME = 52;

    /// RAM/memory available (set TaskResource.scope to distinguish if this
    // applies job-wide, chunk-wide, per process etc)
    // amount units: kibibytes (1024 byte increments)
    // qualifiers: can be used to specify the name of memory variant(s)
    MEMORY = 70;
    /// Virtual memory available. Units as per MEMORY
    VIRT_MEMORY = 71;
    /// ACCELERATOR memory available. Units as per MEMORY
    ACCELERATOR_MEMORY = 72;
    /// Stack size available. Units as per MEMORY
    STACK = 75;

    /// Persistent disk storage available (generally shared by job)
    // number: number of disks, RAID arrays or similar providing this resource
    // amount: size of disk resource kibibytes (per disk if number > 1)
    // qualifiers: specific disk/storage technology model/variant(s)
    DISK = 80;
    /// Non-persistent cache/scratch storage available. Units as per DISK
    CACHE = 81;
    /// SWAP space storage available. Units as per DISK
    SWAP = 85;

    /// Maximum supported/allowed individual file details
    // number: maximum number of files created (if applicable)
    // amount: maximum size of any individual files written or appended to
    //         (in kibibytes)
    // qualifiers: a comment/explanation (optional)
    NEW_FILES = 90;
    /// As per NEW_FILES, but pertaining to files opened
    // (for reading or writing)
    OPEN_FILES = 91;

    /// Groups of jobs queues that this job is allowed to suspend
    // (i.e. preempt or vacate) if required.
    // number: N/A
    // amount: N/A
    // qualifiers: A list of targets that can be suspended/preempted. This list
    //             can include queues (in which case any/all jobs in that queue
    //             are targets), particular resources (in which case any/all
    //             jobs that request/use this resource are eligible targets) or
    //             other job specifications known to the resource manager.
    SUSPEND_TARGETS = 110;

    /// Custom resources (system or site specific)
    // The definition of number and amount will depend on the nature of the
    // resource. qualifiers should be used to name the custom resource(s)
    CUSTOM = 127;
}
